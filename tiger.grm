%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"
#include "yystype.h"

int yylex(void);

void yyerror(char *s) {
	EM_error(EM_tokPos, "%s", s);
}
%}
/*
%union {
	int pos;
	int ival;
	string sval;
}

%token <sval> ID STRING
%token <ival> INT
*/
%token ID STRING INT

%token
	COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK
	LBRACE RBRACE DOT
	ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF
	BREAK NIL
	FUNCTION VAR TYPE

%right THEN ELSE OF DO
%right ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left NEG

%start program

%%

program:	exp

decs:	
		| dec decs
dec:	tydec
		| vardec
		| fundec
tydec:	TYPE ID EQ ty
ty:		ID
		| LBRACE tyfields RBRACE
		| ARRAY OF ID
tyfields:	
			| ID COLON ID kty
kty:	
		| COMMA ID COLON ID kty
vardec:	VAR ID ASSIGN exp
		| VAR ID COLON ID ASSIGN exp
fundec:	FUNCTION ID LPAREN tyfields RPAREN EQ exp
		| FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp

lvalue:	ID ltail
ltail:	
		| DOT ID ltail
		| LBRACK exp RBRACK ltail
seq:	LPAREN expseq RPAREN
expseq:		
			| exp expseq2
expseq2:	
			| SEMICOLON exp expseq2 
funcall:	ID LPAREN RPAREN
			| ID LPAREN exp expargs RPAREN
expargs:	
			| COMMA exp expargs
oper:		exp PLUS exp
			| exp MINUS exp
			| exp TIMES exp
			| exp DIVIDE exp
			| exp EQ exp
			| exp NEQ exp
			| exp LT exp
			| exp LE exp
			| exp GT exp
			| exp GE exp
			| exp AND exp
			| exp OR exp
record:		ID LBRACE RBRACE
			| ID LBRACE ID EQ exp kval RBRACE
kval:		
			| COMMA ID EQ exp kval
array:		ID LBRACK exp RBRACK OF exp
assignment:	lvalue ASSIGN exp
if_then_else:	IF exp THEN exp ELSE exp
if_then:	IF exp THEN exp
while:	WHILE exp DO exp
for:	FOR ID ASSIGN exp TO exp DO exp
let:	LET decs IN expseq END

exp:	lvalue
		| NIL
		| seq
		| INT
		| STRING
		| MINUS exp %prec NEG
		| funcall
		| oper
		| record
		| array
		| assignment
		| if_then_else
		| if_then
		| while
		| for
		| BREAK
		| let
