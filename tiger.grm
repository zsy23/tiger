%{
#include <stdio.h>
#include "util.h"
#include "symbol.h"
#include "errormsg.h"
#include "absyn.h"

int yylex(void);

A_exp absyn_root;

void yyerror(char *s) {
	EM_error(EM_tokPos, "%s", s);
}
%}

%union {
	int pos;
	int ival;
	string sval;
	A_var var;
	A_exp exp;
	A_expList expList;
	A_efieldList efieldList;
	A_decList decList;
	A_dec dec;
	A_nametyList nametyList;
	A_namety namety;
	A_ty ty;
	A_fieldList fieldList;
	A_field field;
	A_fundecList fundecList;
	A_fundec fundec;
}

%token <sval> ID STRING
%token <ival> INT

%token
	COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK
	LBRACE RBRACE DOT
	ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF
	BREAK NIL
	FUNCTION VAR TYPE

%right THEN ELSE OF DO
%right ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left NEG

%type <exp> exp program
%type <var> lvalue lvalue_not_id
%type <expList> expseq exparg
%type <efieldList> kval
%type <decList> decs
%type <dec> dec tydec vardec fundec
%type <ty> ty
%type <fieldList> tyfields kty

%start program

%%

program:	exp		{ absyn_root = $1; }

decs:					{ $$ = NULL; }
		| dec decs		{ 
							$$ = A_DecList($1, $2); 
							if($$) {
								for(A_decList d = $$; d->tail; d = d->tail) {
									if(d->head->kind == d->tail->head->kind) {
										if(d->head->kind == A_typeDec) {
											A_nametyList n;
											for(n = d->head->u.type; n->tail; n = n->tail);
											n->tail = d->tail->head->u.type;
											d->tail = d->tail->tail;
										}
										if(d->head->kind == A_functionDec) {
											A_fundecList f;
											for(f = d->head->u.function; f->tail; f = f->tail);
											f->tail = d->tail->head->u.function;
											d->tail = d->tail->tail;
										}
									}
								}
							}
						}
dec:	tydec			{ $$ = $1; }
		| vardec		{ $$ = $1; }
		| fundec		{ $$ = $1; }
tydec:	TYPE ID EQ ty							{ $$ = A_TypeDec(EM_tokPos, A_NametyList(A_Namety(S_Symbol($2), $4), NULL)); }
ty:		ID										{ $$ = A_NameTy(EM_tokPos, S_Symbol($1)); }
		| LBRACE tyfields RBRACE				{ $$ = A_RecordTy(EM_tokPos, $2); }
		| ARRAY OF ID							{ $$ = A_ArrayTy(EM_tokPos, S_Symbol($3)); }
tyfields:								{ $$ = NULL; }
			| ID COLON ID kty			{ $$ = A_FieldList(A_Field(EM_tokPos, S_Symbol($1), S_Symbol($3)), $4); }
kty:									{ $$ = NULL; }
		| COMMA ID COLON ID kty			{ $$ = A_FieldList(A_Field(EM_tokPos, S_Symbol($2), S_Symbol($4)), $5); }
vardec:	VAR ID ASSIGN exp				{ $$ = A_VarDec(EM_tokPos, S_Symbol($2), NULL, $4); }
		| VAR ID COLON ID ASSIGN exp	{ $$ = A_VarDec(EM_tokPos, S_Symbol($2), S_Symbol($4), $6); }
fundec:	FUNCTION ID LPAREN tyfields RPAREN EQ exp				{ $$ = A_FunctionDec(EM_tokPos, A_FundecList(A_Fundec(EM_tokPos, S_Symbol($2), $4, NULL, $7), NULL)); }
		| FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp	{ $$ = A_FunctionDec(EM_tokPos, A_FundecList(A_Fundec(EM_tokPos, S_Symbol($2), $4, S_Symbol($7), $9), NULL)); }

lvalue:		ID		{ $$ = A_SimpleVar(EM_tokPos, S_Symbol($1)); }
			| lvalue_not_id 	{ $$ = $1; }
lvalue_not_id:	lvalue DOT ID	{ $$ = A_FieldVar(EM_tokPos, $1, S_Symbol($3)); }
				| ID LBRACK exp RBRACK		{ $$ = A_SubscriptVar(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1)), $3); }
				| lvalue_not_id LBRACK exp RBRACK { $$ = A_SubscriptVar(EM_tokPos, $1, $3); }
expseq:									{ $$ = NULL; }
			| SEMICOLON exp expseq		{ $$ = A_ExpList($2, $3); } 
exparg:									{ $$ = NULL; }
			| COMMA exp exparg			{ $$ = A_ExpList($2, $3); }
kval:									{ $$ = NULL; }
			| COMMA ID EQ exp kval		{ $$ = A_EfieldList(A_Efield(S_Symbol($2), $4), $5); }

exp:	ID		{ $$ = A_VarExp(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1))); }
		| lvalue_not_id		{ $$ = A_VarExp(EM_tokPos, $1); }
		| NIL		{ $$ = A_NilExp(EM_tokPos); }
		| LPAREN RPAREN				{ $$ = A_SeqExp(EM_tokPos, NULL); }
		| LPAREN exp expseq RPAREN		{ $$ = A_SeqExp(EM_tokPos, A_ExpList($2, $3)); }
		| INT		{ $$ = A_IntExp(EM_tokPos, $1); }
		| STRING	{ $$ = A_StringExp(EM_tokPos, $1); }
		| MINUS exp %prec NEG	{ $$ = A_OpExp(EM_tokPos, A_minusOp, A_IntExp(EM_tokPos, 0), $2); }
		| ID LPAREN RPAREN				{ $$ = A_CallExp(EM_tokPos, S_Symbol($1), NULL); }
		| ID LPAREN exp exparg RPAREN	{ $$ = A_CallExp(EM_tokPos, S_Symbol($1), A_ExpList($3, $4)); }
		| exp PLUS exp		{ $$ = A_OpExp(EM_tokPos, A_plusOp, $1, $3); }
		| exp MINUS exp		{ $$ = A_OpExp(EM_tokPos, A_minusOp, $1, $3); }
		| exp TIMES exp		{ $$ = A_OpExp(EM_tokPos, A_timesOp, $1, $3); }
		| exp DIVIDE exp	{ $$ = A_OpExp(EM_tokPos, A_divideOp, $1, $3); }
		| exp EQ exp		{ $$ = A_OpExp(EM_tokPos, A_eqOp, $1, $3); }
		| exp NEQ exp		{ $$ = A_OpExp(EM_tokPos, A_neqOp, $1, $3); }
		| exp LT exp		{ $$ = A_OpExp(EM_tokPos, A_ltOp, $1, $3); }
		| exp LE exp		{ $$ = A_OpExp(EM_tokPos, A_leOp, $1, $3); }
		| exp GT exp		{ $$ = A_OpExp(EM_tokPos, A_gtOp, $1, $3); }
		| exp GE exp		{ $$ = A_OpExp(EM_tokPos, A_geOp, $1, $3); }
		| exp AND exp		{ $$ = A_IfExp(EM_tokPos, $1, $3, A_IntExp(EM_tokPos, 0)); }
		| exp OR exp		{ $$ = A_IfExp(EM_tokPos, $1, A_IntExp(EM_tokPos, 1), $3); }
		| ID LBRACE RBRACE					{ $$ = A_RecordExp(EM_tokPos, S_Symbol($1), NULL); }
		| ID LBRACE ID EQ exp kval RBRACE	{ $$ = A_RecordExp(EM_tokPos, S_Symbol($1), A_EfieldList(A_Efield(S_Symbol($3), $5), $6)); }
		| ID LBRACK exp RBRACK OF exp		{ $$ = A_ArrayExp(EM_tokPos, S_Symbol($1), $3, $6); }
		| lvalue ASSIGN exp					{ $$ = A_AssignExp(EM_tokPos, $1, $3); }
		| IF exp THEN exp ELSE exp			{ $$ = A_IfExp(EM_tokPos, $2, $4, $6); }
		| IF exp THEN exp					{ $$ = A_IfExp(EM_tokPos, $2, $4, NULL); }
		| WHILE exp DO exp					{ $$ = A_WhileExp(EM_tokPos, $2, $4); }
		| FOR ID ASSIGN exp TO exp DO exp	{ $$ = A_ForExp(EM_tokPos, S_Symbol($2), $4, 46, $8); }
		| BREAK								{ $$ = A_BreakExp(EM_tokPos); }
		| LET decs IN END				{ $$ = A_LetExp(EM_tokPos, $2, NULL); }
		| LET decs IN exp expseq END	{ $$ = A_LetExp(EM_tokPos, $2, A_SeqExp(EM_tokPos, A_ExpList($4, $5))); }
